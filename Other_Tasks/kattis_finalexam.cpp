/**Kattis - finalexam
 * Mathematics + DP + Data Structures + Heavy Optimisation.
 * Yet another very difficult problem (to me).
 * First we need to know the mathematical fact that every primitive pythagorean triplet can be
 * generated by (m^2 - n^2, 2mn, m^2 + n^2) where m > n > 0, gcd(m, n) = 1 and m and n are of
 * opposite parity. Now, we can generate all pythagorean triplets with the hypothenus <= 3e7
 * by limiting m <= sqrt(3e7) and n <= m.
 *
 * We also have the fact that for all primitive hypothenuse c, all prime divisors p of c are of form
 * p % 1 == 4 and thus we have that c % 4 == 1, this allows us to more compactly store the primitive
 * triplets:  We store the pythagorean triplets (a, b, c) as an array of vectors where primitive[i
 * >> 2] contains all tuples (a, b) where c = i. We can then iterate through all tuples (a, b) for a
 * given c easily.
 *
 * The next step is seeing for each given c, what its divisors are, and thus what primitive
 * hypothenuses it can be a multiple of. For this, we opt to use prime factorisation + recursion to
 * enumerate all the divisors. This allows us to only construct divisors of c which have prime
 * factors congruent to 1 mod 4. For numbers <= 10^9, the number of (regular) divisors is roughly
 * 10^3 approx cbrt(10^9). In general, for some number n, we can assume that the max number of
 * divisors is roughly n^(1/3). This seems good, but it is only barely good enough.
 *
 * For each divisor d of c (that has primes = 1 mod 4), we consider triangles with c as the
 * primitive hypothenuse and the multiplier k as k = c / d. We check for the number of tuples (a_p *
 * k, b_p * k, c) where (a_p, b_p, d) is a primitive pythagorean triplet. This can be done by seeing
 * how many a_p * k and how many b_p * k are given in the input. We then multiply these the number
 * of each a_p * k and b_p * k by the number of c's in the input. We then add these to the answer.
 *
 * Optimisation is the real key to this problem. Apart from the optimisations described above (like
 * only considering divisors with primes = 1 mod 4), there are several "minor" optimisations that
 * seem to help (greatly):
 * 1. When generating primitive pythagorean triplets, we need to repeatedly check if gcd(m, n) = 1.
 * We can do dp to compute the gcds of relevant pairs of m and n. This reduces the complexity of
 * that part by a log factor.
 * 2. We precompute the primes <= 5490 for use during prime factorisation. This not only saves time
 * but also memory for the sieve of eratosthenes.
 * 3. We use a hash map to store the number of each segement length in the input. These hash maps
 * are accessed very frequently and so we reserve a large amount of memory for them, reducing the
 * load factor and thus increasing access speed.
 * 4. For each divisor, we compute bmap[b * k] * amap[a * k], amap[b * k] * bmap[a * k]. We should
 * do short circuiting to only check the other factor of each product if the first factor is
 * non-zero. Since the factors are frequently 0, this saves a lot of time.
 *
 * Time and space trade off is a real thing here. We would like to reduce load factors of hash maps
 * or convert them to direct access arrays, but this would require a lot of memory. We need to
 * balance that.
 *
 *  Time: O(3e7 + n * (3e7)^1/3), Space: O(6n + 2 *3e7)
 */
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,fma")
#pragma GCC optimize("unroll-loops")
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const ll lim = (int)(3e7);
const ll maxn = (int)(3e5);
int na, nb, nc;
unordered_map<int, int> cmap, bmap, amap;
vector<pair<int, int>> primitive[lim / 4 + 1];

vector<int> memo[5490];  // maxn > sqrt(lim)
vector<int> primes = {
    2,    3,    5,    7,    11,   13,   17,   19,   23,   29,   31,   37,   41,   43,   47,   53,
    59,   61,   67,   71,   73,   79,   83,   89,   97,   101,  103,  107,  109,  113,  127,  131,
    137,  139,  149,  151,  157,  163,  167,  173,  179,  181,  191,  193,  197,  199,  211,  223,
    227,  229,  233,  239,  241,  251,  257,  263,  269,  271,  277,  281,  283,  293,  307,  311,
    313,  317,  331,  337,  347,  349,  353,  359,  367,  373,  379,  383,  389,  397,  401,  409,
    419,  421,  431,  433,  439,  443,  449,  457,  461,  463,  467,  479,  487,  491,  499,  503,
    509,  521,  523,  541,  547,  557,  563,  569,  571,  577,  587,  593,  599,  601,  607,  613,
    617,  619,  631,  641,  643,  647,  653,  659,  661,  673,  677,  683,  691,  701,  709,  719,
    727,  733,  739,  743,  751,  757,  761,  769,  773,  787,  797,  809,  811,  821,  823,  827,
    829,  839,  853,  857,  859,  863,  877,  881,  883,  887,  907,  911,  919,  929,  937,  941,
    947,  953,  967,  971,  977,  983,  991,  997,  1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049,
    1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163,
    1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283,
    1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423,
    1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511,
    1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619,
    1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747,
    1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877,
    1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003,
    2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129,
    2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267,
    2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377,
    2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503,
    2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657,
    2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741,
    2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861,
    2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011,
    3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167,
    3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301,
    3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413,
    3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541,
    3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671,
    3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797,
    3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923,
    3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057,
    4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211,
    4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337,
    4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481,
    4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621,
    4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751,
    4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909,
    4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011,
    5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167,
    5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309,
    5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443,
    5449, 5471, 5477, 5479, 5483};
// primes < 5490
ll ans;
int csi, cmapcsi;
vector<tuple<int, int>> prime_factors;

void recurse(int i, int cur)
{
    if (i == prime_factors.size()) {
        for (auto &[a, b] : primitive[cur >> 2]) {
            int k = csi / cur;

            int x = bmap[b * k];
            if (x) {
                ans += (ll)x * amap[a * k] * cmapcsi;
            }

            x = amap[b * k];
            if (x) {
                ans += (ll)x * bmap[a * k] * cmapcsi;
            }
        }
        return;
    }

    auto &[p, exp] = prime_factors[i];
    for (int j = 0; j <= exp; j++) {
        recurse(i + 1, cur);
        cur *= p;
    }
}
int main()
{
    for (int a = 1; a < 5490; a++) {
        memo[a].assign(a + 1, 0);
        memo[a][0] = a;  // gcd(a, 0)
        for (int b = 1; b <= a; b++) {
            memo[a][b] = memo[b][a % b];
        }
    }

    cin >> na >> nb >> nc;
    int temp;
    amap.reserve(((int)3e5) * 2 * sizeof(int));
    bmap.reserve(((int)3e5) * 2 * sizeof(int));
    cmap.reserve(((int)3e5) * 2 * sizeof(int));

    for (int i = 0; i < na; i++) {
        scanf("%d", &temp);
        amap[temp]++;
    }

    for (int i = 0; i < nb; i++) {
        scanf("%d", &temp);
        bmap[temp]++;
    }

    int uniqc = 0;
    for (int i = 0; i < nc; i++) {
        scanf("%d", &temp);
        cmap[temp]++;
    }

    int top = 5478;
    ans = 0;
    for (int m = 2; m < top; m++) {
        for (int n = 1 ^ (m & 1); n < m; n += 2) {
            if (memo[m][n] != 1) continue;
            int c = m * m + n * n;
            if (c > lim) break;
            int a = m * m - n * n;
            int b = 2 * m * n;

            primitive[c >> 2].emplace_back(make_pair(a, b));
        }
    }

    int exp;
    for (auto &kv : cmap) {
        csi = kv.first;
        cmapcsi = kv.second;
        prime_factors.clear();
        int n = csi;
        for (ll j = 0; j < (int)primes.size() && primes[j] * primes[j] <= n; j++) {
            if (n % primes[j] == 0) {
                exp = 0;
                while (n % primes[j] == 0) {
                    n /= primes[j];
                    exp++;
                }
                if ((primes[j] & 3) == 1 && primes[j] > 3)
                    prime_factors.emplace_back(primes[j], exp);
            }
        }

        if (n != 1 && (n & 3) == 1) {
            prime_factors.emplace_back(n, 1);
        }

        recurse(0, 1);
    }

    printf("%lld\n", ans);

    return 0;
}